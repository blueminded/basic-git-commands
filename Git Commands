Git Commands
------------

git version

git help

git help config

Solution if Git not working after an update
-------------------------------------------
sudo xcode-select --install

See current config value
-------------------------
git config --global --list

Edit git config file with default editor
----------------------------------------
git config --global -e

Setting global values to config
-------------------------------
git config --global user.name "Carlos Vergara"
git config --global user.email "carlos.vergara@cbsinteractive.com"

Setting always to prune when Fetch or Pull
------------------------------------------
git config --global fetch.prune true

Setting Diff and Merge Tools
----------------------------
git config --global merge.tool p4merge
git config --global mergetool.p4merge.path /Applications/p4merge.app/Contents/MacOS/p4merge
git config --global mergetool.prompt false
git config --global mergetool.keepbackup false

git config --global diff.tool p4merge
git config --global difftool.p4merge.path /Applications/p4merge.app/Contents/MacOS/p4merge
git config --global difftool.prompt false

See git user-based config file
-------------------------------
cat ~/.gitconfig

Update git user-based config file
-------------------------------
nano ~/.gitconfig

see current directory
---------------------
pwd

Exit from VIM when using GIT
---------------------------
ESC + :q! -> Exit without saving
ESC + :wq -> Exit and saving

Git initialization
------------------
git init [project] (this parameter is optional)

Git initialization inside a folder
----------------------------------
git init .

Check the remote repository
---------------------------
git remote -v

Check untracked files
---------------------
git status

Check untracked files
---------------------
git status -s

Add file to Git index
---------------------
git add [filename]

Add several files to Git index
------------------------------
git add .

Ignoring files
--------------
nano .gitignore (on the root project)

Unstage files (so that the file is not commited)
-----------------------------------------------
This command just unstage files that are in the stage area but changes are not discarded

git reset HEAD (for all files)
git reset HEAD [filename](for a specific file)



Remove a file from staging area
-------------------------------
git rm --cached [file name]

Create a commit
---------------------
git commit -m "my message"

Uncommit the last commit
------------------------
git reset HEAD~

You can create an alias for that, in your git global file add:
[alias]
    uncommit = "reset HEAD~"

At this point, you can select the files you want in the commit and
execute the amend to create a new fresh commit


Adding and commit in one step when file si updated
--------------------------------------------------
git commit -am "my message" 


Restore file to last commit
---------------------------
git restore README.md


Show commit information
-----------------------
git show {commit id}

Amend commit
-------------
You should only use it on a local branch or on your own branch 
that only you use and has no children. Basically using this command 
you can change the message for a commit or even add new staged files to the commit. 
The result will be a new commit with the changes on the amend.

IMPORTANT:ONLY TO USE IN YOUR OWN BRANCH AND LOCAL 

ex. git commit --amend (open the editor)
    git commit --amend -m "your new message" (inline)

Example removing a commited file
1. git rm --cached [file-name] this ends with the file as not tracked file
2. git commit --amend -m "The file is not more on the commit"

Display Git log
---------------
git log - to close press q
git log --oneline --graph --decorate --color 
git log --oneline --graph --decorate --color --all
git log --abbrev-commit
git log {from #commit}...{to #commit}
git log --since="3 days ago" 
git log -- filename
git log  --follow -- {filename}

Remove a file from the repo
---------------------------
git rm debug.log 

Remove a folder recursively(be carefull)
---------------------------
rm -rf level1

Remove a file from the repo using operating system
--------------------------------------------------
rm debug.log 

Remove git from a folder
------------------------
rm .rf .git

move a file to another folder
-----------------------------
git mv index.html web

Rename file using git
-----------------------------
git mv currentfile.html renamed-file.html

Rename file using operating system
----------------------------------
mv currentfile.html renamed-file.html

add changes from all tracked and untracked files
------------------------------------------------
git add -A 

update tracked files
--------------------
git add -u 

Add origin to a local repository
--------------------------------
git remote add remote-name(origin) [remote-repo-location]

Update remote references
------------------------
git remote set-url origin [remote-repo-location]

Display remote repo information
-------------------------------
git remote show origin

List Git's Remotes
------------------
git remote -v

Push to remote
--------------
git push -u remote-name branch-name (-u we need it the first time)

Pull from remote repo
---------------------
git pull origin master 

Clone from remote repo
---------------------
git clone [URL repo] [local folder name](optional)

List all tracked files from repo
--------------------------------
git ls-files

Creating Git alias
------------------
git config --global alias.hist "the command you want without git word"
ex. git config --global alias.hist "log --all --graph --decorate --oneline"

Check differences between staging area and Working directory
------------------------------------------------------------
git diff

Check differences in Diff tool
------------------------------
git difftool

Check differences between Working directory and last commit
------------------------------------------------------------
git diff HEAD

Check differences between staged area and last commit
-----------------------------------------------------
git diff --staged HEAD

Check differences between staged area and last commit(Difftool)
---------------------------------------------------------------
git difftool --staged HEAD

Check differences between staged area and last commit(one file)
---------------------------------------------------------------
git diff -- [path to file]

Check differences between staged area and last commit(one file -difftool)
---------------------------------------------------------------
git difftool -- [path to file]

Check differences between two commits
-------------------------------------
git diff [commitID from] [commitID to]

compare HEAD with HEAD-1
-------------------------------------
git diff HEAD HEAD^

compare HEAD with HEAD-1 )(Difftool)
-------------------------------------
git difftool HEAD HEAD^

compare local with remote
-------------------------
git diff master origin/master 

compare local with remote (Difftool)
------------------------------------
git difftool master origin/master

List local branches
-------------------
git branch

List all branches(including remote)
-----------------------------------
git branch -a

Create a new Branch
-------------------
git branch [branch name]

Create and checkout a new Branch
--------------------------------
git checkout -b [branch name]

Position into a branch
----------------------
git checkout [branch name]

Checkout a remote branch
------------------------
git checkout -b [branch name] origin/[branch name]

Rename a branch
---------------
git branch -m [current branch] [new branch name]

Delete a branch
---------------
git branch -d [branch name]

Delete a remote branch
---------------
git push origin :[branch name] ex.  git push origin :feature/profile-tracking

MERGING
In order to merge from branch A to B, first I need to checkout B, then just to be sure execute `git difftool B A` to verify the changes if everything is OK run `git merge A` the result is the merge of A into B
------------------
git merge [branch name] ->this delete the commit from the branch merged
git merge [branch name] --no-ff -> this preserve the commit from the branch merged

Automatic merge
---------------
git merge [branch name] -m "message related to the merge"

RESOLVING CONFLICTS
-------------------
git mergetool  

STASHING
it's used to save temporary work. The stash command only stash tracked files

Saving a stash
--------------
git stash
git stash push ?? Investigate this.

Saving a stash with description
-------------------------------
git stash save "your description here"

Saving a stash including not tracking files
-------------------------------------------
git stash -u

Show a specific stash information
---------------------------------
git stash show stash@{stash number}

Apply a stash (recover the stash)
--------------
git stash apply

Apply a specific stash
----------------------
 git stash apply stash@{stash number}

Aply stash and remove it from stashes
--------------------------------------
git stash pop

List stashes
------------
git stash list

Remove the last stash
---------------------
git stash drop

Remove all stashes
---------------------
git stash clear

Remove a specific stash
-----------------------
git stash drop stash@{stash number}

Stash files into a branch
-------------------------
git stash branch [branch name] or
git stash branch []new branch name] stash@{stash number}

TAGGING

Create a tag
------------
git tag [Tag Name]

Create a annotated tag
------------
git tag -a [tag name] ex. git tag -a v-1.0

Create a annotated tag for specific commit
------------
git tag -a [tag name] [commit id] ex. git tag -a v-9.8-beta 758f96b

Another way to created a annotated tag
--------------------------------------
git tag [tag name] -m "a message" Ex. git tag v-1.2 -m "Release 1.2"

tag list
--------
git tag --list

Search tag
----------
git tag -l "[search word]". ex. git tag -l "OnMaster*" or git tag -l "rebas*"

remove a tag
------------
git tag --delete [Tag Name]

Push specific tag to remote repo
--------------------------------
git push origin [tag name]

Push all local tags to remote
-----------------------------
git push --tags

Delete a remote tag(It's recommended also to delete it in your local)
-------------------
git push origin :[tag name] Ex.git push origin :v-0.9.8-beta

TIME TRAVEL WITH GIT

When using RESET always do it in your local repo not in a public one, this can leads
to big problems. It mainly for experimental purpose

git reset HEAD^1
git reset HEAD^2

and for get back to the future you can use the command:

git reflog

This command display all the actions done, there you can find the commit ids and travel to
that specific commit using:

git reset [commit id]

HARD RESET 
Use it with caution it can be messy. Use it always on local branches.

Reset everything to last commit any change on stage area will be lost 
---------------------------------------------------------------------
git reset head --hard

Remove all untracked files and folders
--------------------------------------
git clean -d -x -f

Interactive clean
-----------------
git clean -d -x -i

Revert a commit
---------------
When you revert you will end up with the state you were before your commit.
git revert [commit id you want to revert]


Uncommit a commited file (local)
----------------------------------
git reset head^ -- [file name]
git commit --amend (open editor to update message) or
git commit --amend -m "your new message here"

Uncommit a commited file (remote)
----------------------------------
git checkout [commitID or HEAD^] -- [filename]
git commit -am "your reverted message"
git push
git checkout HEAD^ -- [filename] get back to your unfinished work, again do

CherryPicks
-----------
When using cherry picks, when select a commit, 
all commit after the selected will be ignored

git cherry-pick [sha-1 commit id]

after resolve the conflicts in the cherry pick execute
git cherry-pick --continue